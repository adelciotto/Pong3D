#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input /home/magicbush/Code/Games/pong3d/code/shaders/bloom.glsl --output /home/magicbush/Code/Games/pong3d/cmake-build-release/bloom.glsl.h --slang glsl410

    Overview:
    =========
    Shader program: 'program_down_sample':
        Get shader desc: bloom_program_down_sample_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs_down_sample
        Attributes:
            ATTR_bloom_program_down_sample_a_obj_position => 0
            ATTR_bloom_program_down_sample_a_obj_uv => 1
    Shader program: 'program_up_sample':
        Get shader desc: bloom_program_up_sample_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs_up_sample
        Attributes:
            ATTR_bloom_program_up_sample_a_obj_position => 0
            ATTR_bloom_program_up_sample_a_obj_uv => 1
    Bindings:
        Uniform block 'fs_down_sample_uniforms':
            C struct: bloom_fs_down_sample_uniforms_t
            Bind slot: UB_bloom_fs_down_sample_uniforms => 0
        Uniform block 'fs_up_sample_uniforms':
            C struct: bloom_fs_up_sample_uniforms_t
            Bind slot: UB_bloom_fs_up_sample_uniforms => 0
        Image 'u_down_sample_tex':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_bloom_u_down_sample_tex => 0
        Image 'u_up_sample_tex':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: IMG_bloom_u_up_sample_tex => 0
        Sampler 'u_down_sample_smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_bloom_u_down_sample_smp => 0
        Sampler 'u_up_sample_smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_bloom_u_up_sample_smp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before bloom.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_bloom_program_down_sample_a_obj_position (0)
#define ATTR_bloom_program_down_sample_a_obj_uv (1)
#define ATTR_bloom_program_up_sample_a_obj_position (0)
#define ATTR_bloom_program_up_sample_a_obj_uv (1)
#define UB_bloom_fs_down_sample_uniforms (0)
#define UB_bloom_fs_up_sample_uniforms (0)
#define IMG_bloom_u_down_sample_tex (0)
#define IMG_bloom_u_up_sample_tex (0)
#define SMP_bloom_u_down_sample_smp (0)
#define SMP_bloom_u_up_sample_smp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct bloom_fs_down_sample_uniforms_t {
    zpl_vec2 u_texel_size;
    uint8_t _pad_8[8];
} bloom_fs_down_sample_uniforms_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct bloom_fs_up_sample_uniforms_t {
    float u_filter_radius;
    uint8_t _pad_4[12];
} bloom_fs_up_sample_uniforms_t;
#pragma pack(pop)
/*
    #version 410

    layout(location = 0) out vec2 v_uv;
    layout(location = 1) in vec2 a_obj_uv;
    layout(location = 0) in vec2 a_obj_position;

    void main()
    {
        v_uv = a_obj_uv;
        gl_Position = vec4(a_obj_position, 0.0, 1.0);
    }

*/
static const uint8_t bloom_vs_source_glsl410[224] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,
    0x5f,0x6f,0x62,0x6a,0x5f,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x5f,0x6f,0x62,0x6a,0x5f,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,
    0x61,0x5f,0x6f,0x62,0x6a,0x5f,0x75,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x61,0x5f,0x6f,0x62,0x6a,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
/*
    #version 410

    uniform vec4 fs_down_sample_uniforms[1];
    uniform sampler2D u_down_sample_tex_u_down_sample_smp;

    layout(location = 0) in vec2 v_uv;
    layout(location = 0) out vec3 frag_color;

    void main()
    {
        float _45 = fma(-2.0, fs_down_sample_uniforms[0].x, v_uv.x);
        float _50 = fma(2.0, fs_down_sample_uniforms[0].y, v_uv.y);
        float _77 = fma(2.0, fs_down_sample_uniforms[0].x, v_uv.x);
        float _138 = fma(-2.0, fs_down_sample_uniforms[0].y, v_uv.y);
        float _180 = v_uv.x - fs_down_sample_uniforms[0].x;
        float _184 = v_uv.y + fs_down_sample_uniforms[0].y;
        float _195 = v_uv.x + fs_down_sample_uniforms[0].x;
        float _214 = v_uv.y - fs_down_sample_uniforms[0].y;
        frag_color = texture(u_down_sample_tex_u_down_sample_smp, vec2(v_uv.x, v_uv.y)).xyz * 0.125;
        frag_color += ((((texture(u_down_sample_tex_u_down_sample_smp, vec2(_45, _50)).xyz + texture(u_down_sample_tex_u_down_sample_smp, vec2(_77, _50)).xyz) + texture(u_down_sample_tex_u_down_sample_smp, vec2(_45, _138)).xyz) + texture(u_down_sample_tex_u_down_sample_smp, vec2(_77, _138)).xyz) * 0.03125);
        frag_color += ((((texture(u_down_sample_tex_u_down_sample_smp, vec2(v_uv.x, _50)).xyz + texture(u_down_sample_tex_u_down_sample_smp, vec2(_45, v_uv.y)).xyz) + texture(u_down_sample_tex_u_down_sample_smp, vec2(_77, v_uv.y)).xyz) + texture(u_down_sample_tex_u_down_sample_smp, vec2(v_uv.x, _138)).xyz) * 0.0625);
        frag_color += ((((texture(u_down_sample_tex_u_down_sample_smp, vec2(_180, _184)).xyz + texture(u_down_sample_tex_u_down_sample_smp, vec2(_195, _184)).xyz) + texture(u_down_sample_tex_u_down_sample_smp, vec2(_180, _214)).xyz) + texture(u_down_sample_tex_u_down_sample_smp, vec2(_195, _214)).xyz) * 0.125);
        frag_color = max(frag_color, vec3(9.9999997473787516355514526367188e-05));
    }

*/
static const uint8_t bloom_fs_down_sample_source_glsl410[1795] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x64,0x6f,
    0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x64,0x6f,0x77,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x35,0x20,0x3d,0x20,0x66,0x6d,0x61,0x28,0x2d,
    0x32,0x2e,0x30,0x2c,0x20,0x66,0x73,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,0x5d,0x2e,
    0x78,0x2c,0x20,0x76,0x5f,0x75,0x76,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x35,0x30,0x20,0x3d,0x20,0x66,0x6d,0x61,0x28,
    0x32,0x2e,0x30,0x2c,0x20,0x66,0x73,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,0x5d,0x2e,
    0x79,0x2c,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x37,0x20,0x3d,0x20,0x66,0x6d,0x61,0x28,
    0x32,0x2e,0x30,0x2c,0x20,0x66,0x73,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,0x5d,0x2e,
    0x78,0x2c,0x20,0x76,0x5f,0x75,0x76,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x33,0x38,0x20,0x3d,0x20,0x66,0x6d,0x61,
    0x28,0x2d,0x32,0x2e,0x30,0x2c,0x20,0x66,0x73,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,
    0x5d,0x2e,0x79,0x2c,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x38,0x30,0x20,0x3d,0x20,0x76,
    0x5f,0x75,0x76,0x2e,0x78,0x20,0x2d,0x20,0x66,0x73,0x5f,0x64,0x6f,0x77,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,
    0x30,0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x31,0x38,0x34,0x20,0x3d,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x20,0x2b,0x20,
    0x66,0x73,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x79,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x39,0x35,0x20,0x3d,0x20,0x76,
    0x5f,0x75,0x76,0x2e,0x78,0x20,0x2b,0x20,0x66,0x73,0x5f,0x64,0x6f,0x77,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,
    0x30,0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x32,0x31,0x34,0x20,0x3d,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x20,0x2d,0x20,
    0x66,0x73,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x79,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,
    0x28,0x76,0x5f,0x75,0x76,0x2e,0x78,0x2c,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x29,
    0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x30,0x2e,0x31,0x32,0x35,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2b,0x3d,
    0x20,0x28,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x64,
    0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,
    0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,
    0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x34,0x35,0x2c,0x20,0x5f,0x35,0x30,0x29,
    0x29,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,
    0x78,0x5f,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,
    0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x37,0x37,0x2c,0x20,0x5f,
    0x35,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x34,
    0x35,0x2c,0x20,0x5f,0x31,0x33,0x38,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x64,0x6f,0x77,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,
    0x63,0x32,0x28,0x5f,0x37,0x37,0x2c,0x20,0x5f,0x31,0x33,0x38,0x29,0x29,0x2e,0x78,
    0x79,0x7a,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x33,0x31,0x32,0x35,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2b,
    0x3d,0x20,0x28,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,
    0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,
    0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,
    0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x76,0x5f,0x75,0x76,0x2e,0x78,0x2c,0x20,
    0x5f,0x35,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x34,
    0x35,0x2c,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,
    0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x64,0x6f,0x77,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x64,
    0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,
    0x76,0x65,0x63,0x32,0x28,0x5f,0x37,0x37,0x2c,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,
    0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,
    0x74,0x65,0x78,0x5f,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x76,0x5f,0x75,0x76,
    0x2e,0x78,0x2c,0x20,0x5f,0x31,0x33,0x38,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,
    0x2a,0x20,0x30,0x2e,0x30,0x36,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2b,0x3d,0x20,0x28,0x28,0x28,
    0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x64,0x6f,0x77,
    0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,
    0x63,0x32,0x28,0x5f,0x31,0x38,0x30,0x2c,0x20,0x5f,0x31,0x38,0x34,0x29,0x29,0x2e,
    0x78,0x79,0x7a,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,
    0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,
    0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,
    0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x31,0x39,0x35,0x2c,0x20,0x5f,0x31,
    0x38,0x34,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x64,0x6f,0x77,0x6e,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x31,
    0x38,0x30,0x2c,0x20,0x5f,0x32,0x31,0x34,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,
    0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x64,0x6f,0x77,0x6e,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x64,0x6f,
    0x77,0x6e,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,
    0x65,0x63,0x32,0x28,0x5f,0x31,0x39,0x35,0x2c,0x20,0x5f,0x32,0x31,0x34,0x29,0x29,
    0x2e,0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x30,0x2e,0x31,0x32,0x35,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x6d,0x61,0x78,0x28,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x28,0x39,0x2e,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x34,
    0x37,0x33,0x37,0x38,0x37,0x35,0x31,0x36,0x33,0x35,0x35,0x35,0x31,0x34,0x35,0x32,
    0x36,0x33,0x36,0x37,0x31,0x38,0x38,0x65,0x2d,0x30,0x35,0x29,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 410

    uniform vec4 fs_up_sample_uniforms[1];
    uniform sampler2D u_up_sample_tex_u_up_sample_smp;

    layout(location = 0) in vec2 v_uv;
    layout(location = 0) out vec3 frag_color;

    void main()
    {
        float _42 = v_uv.x - fs_up_sample_uniforms[0].x;
        float _47 = v_uv.y + fs_up_sample_uniforms[0].x;
        float _72 = v_uv.x + fs_up_sample_uniforms[0].x;
        float _128 = v_uv.y - fs_up_sample_uniforms[0].x;
        frag_color = texture(u_up_sample_tex_u_up_sample_smp, vec2(v_uv.x, v_uv.y)).xyz * 4.0;
        frag_color += ((((texture(u_up_sample_tex_u_up_sample_smp, vec2(v_uv.x, _47)).xyz + texture(u_up_sample_tex_u_up_sample_smp, vec2(_42, v_uv.y)).xyz) + texture(u_up_sample_tex_u_up_sample_smp, vec2(_72, v_uv.y)).xyz) + texture(u_up_sample_tex_u_up_sample_smp, vec2(v_uv.x, _128)).xyz) * 2.0);
        frag_color += (((texture(u_up_sample_tex_u_up_sample_smp, vec2(_42, _47)).xyz + texture(u_up_sample_tex_u_up_sample_smp, vec2(_72, _47)).xyz) + texture(u_up_sample_tex_u_up_sample_smp, vec2(_42, _128)).xyz) + texture(u_up_sample_tex_u_up_sample_smp, vec2(_72, _128)).xyz);
        frag_color *= 0.0625;
    }

*/
static const uint8_t bloom_fs_up_sample_source_glsl410[1104] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x75,0x70,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,
    0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x34,0x32,0x20,0x3d,0x20,0x76,0x5f,0x75,0x76,0x2e,0x78,0x20,0x2d,0x20,0x66,0x73,
    0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x5f,0x34,0x37,0x20,0x3d,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,
    0x20,0x2b,0x20,0x66,0x73,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x32,0x20,0x3d,0x20,0x76,
    0x5f,0x75,0x76,0x2e,0x78,0x20,0x2b,0x20,0x66,0x73,0x5f,0x75,0x70,0x5f,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x73,0x5b,0x30,0x5d,
    0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,
    0x32,0x38,0x20,0x3d,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x20,0x2d,0x20,0x66,0x73,
    0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x28,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,
    0x65,0x78,0x5f,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,
    0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x76,0x5f,0x75,0x76,0x2e,0x78,0x2c,
    0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,
    0x34,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x2b,0x3d,0x20,0x28,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x28,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,
    0x65,0x78,0x5f,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,
    0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x76,0x5f,0x75,0x76,0x2e,0x78,0x2c,
    0x20,0x5f,0x34,0x37,0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2b,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x34,0x32,0x2c,0x20,
    0x76,0x5f,0x75,0x76,0x2e,0x79,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,0x37,
    0x32,0x2c,0x20,0x76,0x5f,0x75,0x76,0x2e,0x79,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,
    0x20,0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x75,0x70,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x75,0x70,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,
    0x28,0x76,0x5f,0x75,0x76,0x2e,0x78,0x2c,0x20,0x5f,0x31,0x32,0x38,0x29,0x29,0x2e,
    0x78,0x79,0x7a,0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2b,0x3d,0x20,0x28,
    0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x75,0x70,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x75,0x70,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,
    0x5f,0x34,0x32,0x2c,0x20,0x5f,0x34,0x37,0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2b,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,
    0x37,0x32,0x2c,0x20,0x5f,0x34,0x37,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,0x2b,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x75,0x70,0x5f,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x5f,
    0x34,0x32,0x2c,0x20,0x5f,0x31,0x32,0x38,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,0x20,
    0x2b,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x75,0x70,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,0x75,0x70,0x5f,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,
    0x5f,0x37,0x32,0x2c,0x20,0x5f,0x31,0x32,0x38,0x29,0x29,0x2e,0x78,0x79,0x7a,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x2a,0x3d,0x20,0x30,0x2e,0x30,0x36,0x32,0x35,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
static inline const sg_shader_desc* bloom_program_down_sample_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)bloom_vs_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)bloom_fs_down_sample_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].glsl_name = "a_obj_position";
            desc.attrs[1].glsl_name = "a_obj_uv";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "fs_down_sample_uniforms";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "u_down_sample_tex_u_down_sample_smp";
            desc.label = "bloom_program_down_sample_shader";
        }
        return &desc;
    }
    return 0;
}
static inline const sg_shader_desc* bloom_program_up_sample_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)bloom_vs_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)bloom_fs_up_sample_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].glsl_name = "a_obj_position";
            desc.attrs[1].glsl_name = "a_obj_uv";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "fs_up_sample_uniforms";
            desc.images[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.images[0].image_type = SG_IMAGETYPE_2D;
            desc.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.images[0].multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.image_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.image_sampler_pairs[0].image_slot = 0;
            desc.image_sampler_pairs[0].sampler_slot = 0;
            desc.image_sampler_pairs[0].glsl_name = "u_up_sample_tex_u_up_sample_smp";
            desc.label = "bloom_program_up_sample_shader";
        }
        return &desc;
    }
    return 0;
}
